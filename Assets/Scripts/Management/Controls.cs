//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""World Controls"",
            ""id"": ""640c300b-c277-4969-847c-5104d1c8878e"",
            ""actions"": [
                {
                    ""name"": ""Reorient"",
                    ""type"": ""Button"",
                    ""id"": ""fef44f62-651e-414e-8e2e-ed8dd1f71e09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""c441741b-e82e-4468-9397-0035e86d96b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""XY Control"",
                    ""type"": ""Value"",
                    ""id"": ""dc0ab218-3102-4232-a393-6dec93dde142"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""55523dd3-d0d7-4c89-91c3-d6965fdefbf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1d1ecd2-5d71-41e9-93e0-6412a6ed6aee"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reorient"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c68b1c5b-2339-4712-b5fb-760e6e8d1e9d"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""4ea74f1b-7fde-4f04-9acc-6ceea95ebeda"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XY Control"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""5c5ec25a-67a4-4c67-99c3-2c270eee3ee3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""XY Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f02543cf-b274-467f-9978-6657d1485e5c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""XY Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b81a5626-ce47-4ef9-bb53-1606918c461e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Start Screen Controls"",
            ""id"": ""87291d50-166a-4215-91f6-0b1903ac8f5b"",
            ""actions"": [
                {
                    ""name"": ""Any Key"",
                    ""type"": ""Button"",
                    ""id"": ""8e1e123f-e2b5-4cee-b551-d6d88ac66f4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7c21773-953e-471c-94ca-71c111f2af3f"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Any Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // World Controls
        m_WorldControls = asset.FindActionMap("World Controls", throwIfNotFound: true);
        m_WorldControls_Reorient = m_WorldControls.FindAction("Reorient", throwIfNotFound: true);
        m_WorldControls_Zoom = m_WorldControls.FindAction("Zoom", throwIfNotFound: true);
        m_WorldControls_XYControl = m_WorldControls.FindAction("XY Control", throwIfNotFound: true);
        m_WorldControls_Back = m_WorldControls.FindAction("Back", throwIfNotFound: true);
        // Start Screen Controls
        m_StartScreenControls = asset.FindActionMap("Start Screen Controls", throwIfNotFound: true);
        m_StartScreenControls_AnyKey = m_StartScreenControls.FindAction("Any Key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // World Controls
    private readonly InputActionMap m_WorldControls;
    private IWorldControlsActions m_WorldControlsActionsCallbackInterface;
    private readonly InputAction m_WorldControls_Reorient;
    private readonly InputAction m_WorldControls_Zoom;
    private readonly InputAction m_WorldControls_XYControl;
    private readonly InputAction m_WorldControls_Back;
    public struct WorldControlsActions
    {
        private @Controls m_Wrapper;
        public WorldControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reorient => m_Wrapper.m_WorldControls_Reorient;
        public InputAction @Zoom => m_Wrapper.m_WorldControls_Zoom;
        public InputAction @XYControl => m_Wrapper.m_WorldControls_XYControl;
        public InputAction @Back => m_Wrapper.m_WorldControls_Back;
        public InputActionMap Get() { return m_Wrapper.m_WorldControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldControlsActions set) { return set.Get(); }
        public void SetCallbacks(IWorldControlsActions instance)
        {
            if (m_Wrapper.m_WorldControlsActionsCallbackInterface != null)
            {
                @Reorient.started -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnReorient;
                @Reorient.performed -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnReorient;
                @Reorient.canceled -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnReorient;
                @Zoom.started -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnZoom;
                @XYControl.started -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnXYControl;
                @XYControl.performed -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnXYControl;
                @XYControl.canceled -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnXYControl;
                @Back.started -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_WorldControlsActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_WorldControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Reorient.started += instance.OnReorient;
                @Reorient.performed += instance.OnReorient;
                @Reorient.canceled += instance.OnReorient;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @XYControl.started += instance.OnXYControl;
                @XYControl.performed += instance.OnXYControl;
                @XYControl.canceled += instance.OnXYControl;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public WorldControlsActions @WorldControls => new WorldControlsActions(this);

    // Start Screen Controls
    private readonly InputActionMap m_StartScreenControls;
    private IStartScreenControlsActions m_StartScreenControlsActionsCallbackInterface;
    private readonly InputAction m_StartScreenControls_AnyKey;
    public struct StartScreenControlsActions
    {
        private @Controls m_Wrapper;
        public StartScreenControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AnyKey => m_Wrapper.m_StartScreenControls_AnyKey;
        public InputActionMap Get() { return m_Wrapper.m_StartScreenControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartScreenControlsActions set) { return set.Get(); }
        public void SetCallbacks(IStartScreenControlsActions instance)
        {
            if (m_Wrapper.m_StartScreenControlsActionsCallbackInterface != null)
            {
                @AnyKey.started -= m_Wrapper.m_StartScreenControlsActionsCallbackInterface.OnAnyKey;
                @AnyKey.performed -= m_Wrapper.m_StartScreenControlsActionsCallbackInterface.OnAnyKey;
                @AnyKey.canceled -= m_Wrapper.m_StartScreenControlsActionsCallbackInterface.OnAnyKey;
            }
            m_Wrapper.m_StartScreenControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AnyKey.started += instance.OnAnyKey;
                @AnyKey.performed += instance.OnAnyKey;
                @AnyKey.canceled += instance.OnAnyKey;
            }
        }
    }
    public StartScreenControlsActions @StartScreenControls => new StartScreenControlsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IWorldControlsActions
    {
        void OnReorient(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnXYControl(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IStartScreenControlsActions
    {
        void OnAnyKey(InputAction.CallbackContext context);
    }
}
